{"version":3,"sources":["common-utilities.es6.js"],"names":["getTypeString","obj","Object","prototype","toString","call","clone","arg","JSON","parse","stringify","isDefined","copySpecifiedObjectProperties","propertyList","src","dst","forEach","property","getOwnProperties","getOwnPropertyNames","generateRange","start","end","result","push","generateFirstNNaturalNumbers","n","replicateString","str","reduce","accumulator","zeroPadNumber","minLength","slice","getDateTimeString","date","typeStringOfParam","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","insertNumberIntoArray","array","i","findIndex","m","length","splice","insertionSort","removeDuplicatesFromArray","x","y","includes"],"mappings":"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","file":"unknown","sourcesContent":["/**\r\n * thaw-common-utilities.js\r\n *\r\n * @copyright 2018 Tom Weatherhead <null@2hrd4u.org> (https://httpbin.org/status/418)\r\n * @license MIT\r\n * @version 0.0.1\r\n */\r\n// @tom-weatherhead/common-utilities.js/src/main.js\n\n'use strict';\n\n// **** Type Utilities ****\n\nexport function getTypeString (obj) {\n\treturn Object.prototype.toString.call(obj);\n}\n\n// **** Object utilities ****\n\n/*\n// From A. Levy's answer at https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object\n\nWhen I had to implement general deep copying I ended up compromising by assuming that I would only need to copy\na plain Object, Array, Date, String, Number, or Boolean. The last 3 types are immutable, so I could perform a shallow copy\nand not worry about it changing. I further assumed that any elements contained in Object or Array would also be one of the 6 simple types\nin that list. This can be accomplished with code like the following:\n\nfunction clone(obj) {\n    var copy;\n\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        copy = [];\n        for (var i = 0, len = obj.length; i < len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n\nThe above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure.\nThat is, there isn't more than one reference to the same data in the object.\n*/\n\nexport function clone (arg) {\n\t// For an in-depth discussion of object copying, see https://scotch.io/bar-talk/copying-objects-in-javascript\n\n\t// **** Warning: JSON.parse(JSON.stringify(arg)) will fail for circular objects.\n\t// ? Do we need isCircular(obj) ?\n\treturn JSON.parse(JSON.stringify(arg));\n}\n\nexport function isDefined (obj) {\n\treturn typeof obj !== 'undefined';\n}\n\nexport function copySpecifiedObjectProperties (propertyList, src, dst = {}) {\n\n\tpropertyList.forEach(property => {\n\n\t\t// if (typeof src[property] !== 'undefined') {\n\t\tif (isDefined(src[property])) {\n\t\t\tdst[property] = src[property];\n\t\t}\n\t});\n\n\treturn dst;\n}\n\nexport function getOwnProperties (obj = {}) {\n\t/*\n\t// Version 1\n\t// See https://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object\n\tlet result = [];\n\n\tfor (var key in obj) {\n\t\tif (obj.hasOwnProperty(key)) {\n\t\t\tresult.push(key);\n\t\t}\n\t}\n\n\treturn result;\n\t*/\n\n\t// Version 2\n\t// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\treturn Object.getOwnPropertyNames(obj);\n}\n\n// **** Numeric utilities ****\n\nexport function generateRange (start, end) {\n\tlet result = [];\n\n\twhile (start <= end) {\n\t\tresult.push(start);\n\t\tstart++;\n\t}\n\n\treturn result;\n}\n\nexport function generateFirstNNaturalNumbers (n) {\n\treturn generateRange(1, n);\n}\n\nexport function replicateString (str, n) {\n\treturn generateFirstNNaturalNumbers(n)\n\t\t.reduce(\n\t\t\t// (accumulator, i) => accumulator + str,\n\t\t\taccumulator => accumulator + str,\n\t\t\t''\n\t\t);\n}\n\nexport function zeroPadNumber (n, minLength) {\n\treturn (replicateString('0', minLength) + n).slice(-minLength);\n}\n\n// **** Date Utilities ****\n\nexport function getDateTimeString (date) {\n\tconst typeStringOfParam = getTypeString(date);\n\n\t// console.log('getDateTimeString() : Type of date parameter is', typeStringOfParam);\n\n\tif (!date || typeStringOfParam !== '[object Date]') {\n\t\t// console.log('getDateTimeString() : Setting the parameter to the current date and time...');\n\t\tdate = new Date();\n\t}\n\n\t// See https://stackoverflow.com/questions/10073699/pad-a-number-with-leading-zeros-in-javascript\n\t// ('000' + num).slice(-4)\n\t// return `${date.getFullYear()}-${('0' + (date.getMonth() + 1)).slice(-2)}-${('0' + date.getDate()).slice(-2)} ${('0' + date.getHours()).slice(-2)}:${('0' + date.getMinutes()).slice(-2)}:${('0' + date.getSeconds()).slice(-2)}`;\n\treturn `${date.getFullYear()}-${zeroPadNumber(date.getMonth() + 1, 2)}-${zeroPadNumber(date.getDate(), 2)} ${zeroPadNumber(date.getHours(), 2)}:${zeroPadNumber(date.getMinutes(), 2)}:${zeroPadNumber(date.getSeconds(), 2)}`;\n}\n\n// **** Array Utilities ****\n\nexport function insertNumberIntoArray (n, array) {\n\t// array must already be sorted in non-descending order.\n\tlet i = array.findIndex(m => m >= n);\n\n\tif (i < 0) {\n\t\ti = array.length;\n\t}\n\n\tlet result = clone(array);\n\n\t// Array.splice modifies the array in place. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n\tresult.splice(i, 0, n);\n\n\treturn result;\n}\n\nexport function insertionSort (array) {\n\treturn array.reduce(\n\t\t(accumulator, n) => insertNumberIntoArray(n, accumulator),\n\t\t[]\n\t);\n}\n\nexport function removeDuplicatesFromArray (array) {\n\t// See the discussion at https://gist.github.com/telekosmos/3b62a31a5c43f40849bb\n\n\t// JavaScript Set: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n\t// See https://stackoverflow.com/questions/13486479/how-to-get-an-array-of-unique-values-from-an-array-containing-duplicates-in-java\n\t// Discussion about performace: See https://medium.com/@jakubsynowiec/unique-array-values-in-javascript-7c932682766c\n\t// return [...new Set(array)]; // Yes. Requires ES6, since it uses the \"spread\" operator (\"...\").\n\n\t// return Array.from(new Set(array)); // Yes\n\n\t// array.includes() does not exist.\n\n\treturn array.reduce((x, y) => x.includes(y) ? x : [...x, y], []); // Yes. From svnpenn.\n}\n"]}